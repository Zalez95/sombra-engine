# Sets all the dependencies of the project
option(INSTALLED_GLM		"Use installed glm library"				ON)
option(INSTALLED_GLEW		"Use installed glew library"			ON)
option(INSTALLED_GLFW		"Use installed glfw library"			ON)
option(INSTALLED_STB		"Use installed stb library"				ON)
option(INSTALLED_OPENAL		"Use installed OpenAL library"			ON)
option(INSTALLED_AUDIOFILE	"Use installed AudioFile library"		ON)
option(INSTALLED_JSON		"Use installed NlohmannJSON library"	ON)
option(INSTALLED_FREETYPE	"Use installed FreeType library"		ON)

if(SOMBRA_BUILD_DOC)
	find_package(Doxygen)
endif()

find_package(OpenGL REQUIRED)
add_library(OpenGL INTERFACE)
target_include_directories(OpenGL INTERFACE "${OPENGL_INCLUDE_DIR}")
target_link_libraries(OpenGL INTERFACE "${OPENGL_LIBRARIES}")

set(original_cmake_build_type ${CMAKE_BUILD_TYPE})

find_package(GLM "0.9.9.8" QUIET)
if(GLM_FOUND AND INSTALLED_GLM)
	message("GLM FOUND: Using system library")
else()
	message("GLM NOT FOUND: Downloading and building GLM from source")
	include(ExternalGLM)
endif()

find_package(GLEW "1.13.0" QUIET)
if(GLEW_FOUND AND INSTALLED_GLEW)
	message("GLEW FOUND: Using system library")
else()
	message("GLEW NOT FOUND: Downloading and building GLEW from source")
	include(ExternalGLEW)
endif()

find_package(GLFW "3.2.1" QUIET)
if(GLFW_FOUND AND INSTALLED_GLFW)
	message("GLFW FOUND: Using system library")
else()
	message("GLFW NOT FOUND: Downloading and building GLFW from source")
	include(ExternalGLFW)
endif()

find_package(STB QUIET)
if(STB_FOUND AND INSTALLED_STB)
	message("STB FOUND: Using system library")
else()
	message("STB NOT FOUND: Downloading and building STB from source")
	include(ExternalSTB)
endif()

find_package(OpenAL QUIET)
if(OPENAL_FOUND AND INSTALLED_OPENAL)
	message("OPENAL FOUND: Using system library")
else()
	message("OPENAL NOT FOUND: Downloading and building OPENAL from source")
	include(ExternalOpenAL)
endif()

find_package(AudioFile "1.0.2" QUIET)
if(AUDIOFILE_FOUND AND INSTALLED_AUDIOFILE)
	message("AUDIOFILE FOUND: Using system library")
else()
	message("AUDIOFILE NOT FOUND: Downloading and building AUDIOFILE from source")
	include(ExternalAudioFile)
endif()

find_package(NlohmannJSON "3.5.0" QUIET)
if(NLOHMANN_JSON_FOUND AND INSTALLED_NLOHMANN_JSON)
	message("NLOHMANN_JSON FOUND: Using system library")
else()
	message("NLOHMANN_JSON NOT FOUND: Downloading and building NLOHMANN_JSON from source")
	include(ExternalNlohmannJSON)
endif()

find_package(FreeType QUIET)
if(FREETYPE_FOUND AND INSTALLED_FREETYPE)
	message("FREETYPE FOUND: Using system library")
else()
	message("FREETYPE NOT FOUND: Downloading and building FREETYPE from source")
	include(ExternalFreeType)
endif()

if(SOMBRA_BUILD_TESTS)
	option(INSTALLED_GTEST "Use installed GTest library" ON)

	find_package(GTest QUIET)
	if(GTEST_FOUND AND INSTALLED_GTEST)
		message("GTEST FOUND: Using system library")
	else()
		message("GTEST NOT FOUND: Downloading and building GTEST from source")
		include(ExternalGTest)
	endif()
endif()

set(CMAKE_BUILD_TYPE "${original_cmake_build_type}" CACHE INTERNAL "")
